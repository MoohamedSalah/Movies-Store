//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoviesMoo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MoviesDBconnectionstring : DbContext
    {
        public MoviesDBconnectionstring()
            : base("name=MoviesDBconnectionstring")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<MemberShipType> MemberShipType { get; set; }
        public virtual DbSet<Movies> Movies { get; set; }
        public virtual DbSet<Rentals> Rentals { get; set; }
    
        public virtual int spCreateMovie(string name, string genra, Nullable<System.DateTime> relateasDate, Nullable<System.DateTime> dateAdd, Nullable<int> memberAvalible, Nullable<int> numberInStock, byte[] moviesPhoto, string altPhoto, string doxContant, string trailerUrl)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var genraParameter = genra != null ?
                new ObjectParameter("Genra", genra) :
                new ObjectParameter("Genra", typeof(string));
    
            var relateasDateParameter = relateasDate.HasValue ?
                new ObjectParameter("RelateasDate", relateasDate) :
                new ObjectParameter("RelateasDate", typeof(System.DateTime));
    
            var dateAddParameter = dateAdd.HasValue ?
                new ObjectParameter("DateAdd", dateAdd) :
                new ObjectParameter("DateAdd", typeof(System.DateTime));
    
            var memberAvalibleParameter = memberAvalible.HasValue ?
                new ObjectParameter("MemberAvalible", memberAvalible) :
                new ObjectParameter("MemberAvalible", typeof(int));
    
            var numberInStockParameter = numberInStock.HasValue ?
                new ObjectParameter("NumberInStock", numberInStock) :
                new ObjectParameter("NumberInStock", typeof(int));
    
            var moviesPhotoParameter = moviesPhoto != null ?
                new ObjectParameter("MoviesPhoto", moviesPhoto) :
                new ObjectParameter("MoviesPhoto", typeof(byte[]));
    
            var altPhotoParameter = altPhoto != null ?
                new ObjectParameter("AltPhoto", altPhoto) :
                new ObjectParameter("AltPhoto", typeof(string));
    
            var doxContantParameter = doxContant != null ?
                new ObjectParameter("DoxContant", doxContant) :
                new ObjectParameter("DoxContant", typeof(string));
    
            var trailerUrlParameter = trailerUrl != null ?
                new ObjectParameter("TrailerUrl", trailerUrl) :
                new ObjectParameter("TrailerUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateMovie", nameParameter, genraParameter, relateasDateParameter, dateAddParameter, memberAvalibleParameter, numberInStockParameter, moviesPhotoParameter, altPhotoParameter, doxContantParameter, trailerUrlParameter);
        }
    
        public virtual int spEditeMovie(Nullable<int> iD, string name, string genra, Nullable<System.DateTime> relateasDate, Nullable<System.DateTime> dateAdd, Nullable<int> memberAvalible, Nullable<int> numberInStock, byte[] moviesPhoto, string altPhoto, string doxContant, string trailerUrl)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var genraParameter = genra != null ?
                new ObjectParameter("Genra", genra) :
                new ObjectParameter("Genra", typeof(string));
    
            var relateasDateParameter = relateasDate.HasValue ?
                new ObjectParameter("RelateasDate", relateasDate) :
                new ObjectParameter("RelateasDate", typeof(System.DateTime));
    
            var dateAddParameter = dateAdd.HasValue ?
                new ObjectParameter("DateAdd", dateAdd) :
                new ObjectParameter("DateAdd", typeof(System.DateTime));
    
            var memberAvalibleParameter = memberAvalible.HasValue ?
                new ObjectParameter("MemberAvalible", memberAvalible) :
                new ObjectParameter("MemberAvalible", typeof(int));
    
            var numberInStockParameter = numberInStock.HasValue ?
                new ObjectParameter("NumberInStock", numberInStock) :
                new ObjectParameter("NumberInStock", typeof(int));
    
            var moviesPhotoParameter = moviesPhoto != null ?
                new ObjectParameter("MoviesPhoto", moviesPhoto) :
                new ObjectParameter("MoviesPhoto", typeof(byte[]));
    
            var altPhotoParameter = altPhoto != null ?
                new ObjectParameter("AltPhoto", altPhoto) :
                new ObjectParameter("AltPhoto", typeof(string));
    
            var doxContantParameter = doxContant != null ?
                new ObjectParameter("DoxContant", doxContant) :
                new ObjectParameter("DoxContant", typeof(string));
    
            var trailerUrlParameter = trailerUrl != null ?
                new ObjectParameter("TrailerUrl", trailerUrl) :
                new ObjectParameter("TrailerUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditeMovie", iDParameter, nameParameter, genraParameter, relateasDateParameter, dateAddParameter, memberAvalibleParameter, numberInStockParameter, moviesPhotoParameter, altPhotoParameter, doxContantParameter, trailerUrlParameter);
        }
    
        public virtual int spSaveCustomer(Nullable<int> iD, string name, Nullable<bool> isSubscribedToNewsLetter, Nullable<int> membershipID, Nullable<System.DateTime> birthdate)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var isSubscribedToNewsLetterParameter = isSubscribedToNewsLetter.HasValue ?
                new ObjectParameter("IsSubscribedToNewsLetter", isSubscribedToNewsLetter) :
                new ObjectParameter("IsSubscribedToNewsLetter", typeof(bool));
    
            var membershipIDParameter = membershipID.HasValue ?
                new ObjectParameter("MembershipID", membershipID) :
                new ObjectParameter("MembershipID", typeof(int));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveCustomer", iDParameter, nameParameter, isSubscribedToNewsLetterParameter, membershipIDParameter, birthdateParameter);
        }
    }
}
